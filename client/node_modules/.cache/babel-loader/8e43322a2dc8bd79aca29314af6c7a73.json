{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Usha\\\\Desktop\\\\family_moment\\\\client\\\\src\\\\components\\\\Form\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\nimport useStyles from './styles';\nimport { createPost, updatePost } from '../../actions/posts';\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  _s();\n\n  var _user$result3;\n\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n  const types = ['image/png', 'imsge/jpeg'];\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  const changeHandler = e => {\n    let selected = e.target.selectedFile[0];\n\n    if (selected && types.includes(selected.type)) {\n      setFile(selected);\n      setError('');\n    } else {\n      setPostData(selected(null));\n      setError('Please select an image file (png or jpeg)');\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        children: \"Please Sign In to create your own memories and like other's memories.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: currentId ? `Editing \"${post.title}\"` : 'Creating a Memory'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        multiline: true,\n        rows: 4,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags (coma separated)\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(',')\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: [/*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          onChange: changeHandler,\n          onDone: ({\n            base64\n          }) => setPostData({ ...postData,\n            selectedFile: base64\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"B3nROsPGSwZkqpbRPNsnf2PNEXc=\", false, function () {\n  return [useSelector, useDispatch, useStyles];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/Usha/Desktop/family_moment/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","useDispatch","useSelector","FileBase","useStyles","createPost","updatePost","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","post","state","posts","find","_id","dispatch","classes","user","JSON","parse","localStorage","getItem","file","setFile","error","setError","types","clear","changeHandler","e","selected","target","includes","type","handleSubmit","preventDefault","name","result","paper","root","form","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport FileBase from 'react-file-base64';\r\n\r\nimport useStyles from './styles';\r\nimport { createPost, updatePost } from '../../actions/posts';\r\n\r\nconst Form = ({ currentId, setCurrentId }) => {\r\n  const [postData, setPostData] = useState({ title: '', message: '', tags: '', selectedFile: '' });\r\n  const post = useSelector((state) => (currentId ? state.posts.find((message) => message._id === currentId) : null));\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const user = JSON.parse(localStorage.getItem('profile'));\r\n\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const types = ['image/png', 'imsge/jpeg'];\r\n\r\n  useEffect(() => {\r\n    if (post) setPostData(post);\r\n  }, [post]);\r\n\r\n  const clear = () => {\r\n    setCurrentId(0);\r\n    setPostData({ title: '', message: '', tags: '', selectedFile: '' });\r\n  };\r\n\r\n  const changeHandler = (e) => {\r\n    let selected = e.target.selectedFile[0];\r\n\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setError('');\r\n    } else {\r\n      setPostData(selected(null));\r\n      setError('Please select an image file (png or jpeg)');\r\n    }\r\n\r\n  }\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (currentId === 0) {\r\n      dispatch(createPost({ ...postData, name: user?.result?.name }));\r\n      clear();\r\n    } else {\r\n      dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\r\n      clear();\r\n    }\r\n  };\r\n\r\n  if (!user?.result?.name) {\r\n    return (\r\n      <Paper className={classes.paper}>\r\n        <Typography variant=\"h6\" align=\"center\">\r\n          Please Sign In to create your own memories and like other's memories.\r\n            </Typography>\r\n      </Paper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.paper}>\r\n      <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n        <Typography variant=\"h6\">{currentId ? `Editing \"${post.title}\"` : 'Creating a Memory'}</Typography>\r\n        <TextField\r\n          name=\"title\"\r\n          variant=\"outlined\"\r\n          label=\"Title\"\r\n          fullWidth\r\n          value={postData.title}\r\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\r\n        />\r\n        <TextField\r\n          name=\"message\"\r\n          variant=\"outlined\"\r\n          label=\"Message\"\r\n          fullWidth multiline rows={4}\r\n          value={postData.message}\r\n          onChange={(e) => setPostData({ ...postData, message: e.target.value })}\r\n        />\r\n        <TextField\r\n          name=\"tags\"\r\n          variant=\"outlined\"\r\n          label=\"Tags (coma separated)\"\r\n          fullWidth value={postData.tags}\r\n          onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })}\r\n        />\r\n        <div className={classes.fileInput}>\r\n          <FileBase\r\n            type=\"file\"\r\n            multiple={false}\r\n            onChange={changeHandler}\r\n            onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })}\r\n          />\r\n          <div className='output'></div>\r\n        </div>\r\n        <Button\r\n          className={classes.buttonSubmit}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          fullWidth>\r\n          Submit\r\n                </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          onClick={clear}\r\n          fullWidth>\r\n          Clear\r\n                    </Button>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}